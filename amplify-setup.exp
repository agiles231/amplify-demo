#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu May 19 12:34:29 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set react_app_name [ exec echo "$::env(react_app_name)" | sed "s/\-//" ]
set amplify_project_name [ exec echo "$::env(amplify_project_name)" | sed "s/\-//" ]
set amplify_env_name [ exec echo "$::env(amplify_env_name)" | sed "s/\-//" ]

set timeout -1
spawn amplify init
match_max 100000
expect "Enter a name for the project"
send -- "$amplify_project_name\r"
expect "The following configuration will be applied"
send -- "n\r"
expect "Enter a name for the environment"
send -- "$amplify_env_name\r"
expect "Choose your default editor"
send -- "\r"
expect "Choose your default editor"
send -- "\r"
expect "What javascript framework are you using"
send -- "\r"
expect "Source Directory Path"
send -- "\r"
expect "Distribution Directory Path"
send -- "\r"
expect "Build Command"
send -- "\r"
expect "Start Command"
send -- "\r"
expect "Select the authentication method you want to use"
send -- "\[B\r"
expect "accessKeyId:"
send -- "$::env(AWS_ACCESS_KEY_ID)\r"
expect "secretAccessKey"
send -- "$::env(AWS_SECRET_ACCESS_KEY)\r"
expect "region"
send -- "\r"
expect EOF
